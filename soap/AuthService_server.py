##################################################
# file: AuthService_server.py
#
# skeleton generated by "ZSI.generate.wsdl2dispatch.ServiceModuleWriter"
#      /usr/bin/wsdl2py -bw http://redalert3pc.auth.pubsvs.gamespy.com/AuthService/AuthService.asmx?wsdl
#
##################################################

from ZSI.schema import GED, GTD
from ZSI.TCcompound import ComplexType, Struct
from AuthService_types import *
from ZSI.twisted.WSresource import WSResource

# Messages  
LoginUserSoapIn = GED("http://gamespy.net/AuthService/", "LoginUser").pyclass

LoginUserSoapOut = GED("http://gamespy.net/AuthService/", "LoginUserResponse").pyclass

LoginUniqueNickSoapIn = GED("http://gamespy.net/AuthService/", "LoginUniqueNick").pyclass

LoginUniqueNickSoapOut = GED("http://gamespy.net/AuthService/", "LoginUniqueNickResponse").pyclass

LoginProfileSoapIn = GED("http://gamespy.net/AuthService/", "LoginProfile").pyclass

LoginProfileSoapOut = GED("http://gamespy.net/AuthService/", "LoginProfileResponse").pyclass

LoginRemoteAuthSoapIn = GED("http://gamespy.net/AuthService/", "LoginRemoteAuth").pyclass

LoginRemoteAuthSoapOut = GED("http://gamespy.net/AuthService/", "LoginRemoteAuthResponse").pyclass

VerifyLoginUniqueNickSoapIn = GED("http://gamespy.net/AuthService/", "VerifyLoginUniqueNick").pyclass

VerifyLoginUniqueNickSoapOut = GED("http://gamespy.net/AuthService/", "VerifyLoginUniqueNickResponse").pyclass

VerifyLoginProfileSoapIn = GED("http://gamespy.net/AuthService/", "VerifyLoginProfile").pyclass

VerifyLoginProfileSoapOut = GED("http://gamespy.net/AuthService/", "VerifyLoginProfileResponse").pyclass

LoginTicketSoapIn = GED("http://gamespy.net/AuthService/", "LoginTicket").pyclass

LoginTicketSoapOut = GED("http://gamespy.net/AuthService/", "LoginTicketResponse").pyclass

AuthRefreshCertificateSoapIn = GED("http://gamespy.net/AuthService/", "AuthRefreshCertificate").pyclass

AuthRefreshCertificateSoapOut = GED("http://gamespy.net/AuthService/", "AuthRefreshCertificateResponse").pyclass

AuthIsCertificateValidSoapIn = GED("http://gamespy.net/AuthService/", "AuthIsCertificateValid").pyclass

AuthIsCertificateValidSoapOut = GED("http://gamespy.net/AuthService/", "AuthIsCertificateValidResponse").pyclass

LoginPs3CertSoapIn = GED("http://gamespy.net/AuthService/", "LoginPs3Cert").pyclass

LoginPs3CertSoapOut = GED("http://gamespy.net/AuthService/", "LoginPs3CertResponse").pyclass


# Service Skeletons
class AuthService(WSResource):
    soapAction = {}
    root = {}

    def __init__(self, post='/AuthService/AuthService.asmx', **kw):
        WSResource.__init__(self)

    def soap_LoginUser(self, ps, **kw):
        request = ps.Parse(LoginUserSoapIn.typecode)
        return request,LoginUserSoapOut()

    soapAction['http://gamespy.net/AuthService/LoginUser'] = 'soap_LoginUser'
    root[(LoginUserSoapIn.typecode.nspname,LoginUserSoapIn.typecode.pname)] = 'soap_LoginUser'

    def soap_LoginUniqueNick(self, ps, **kw):
        request = ps.Parse(LoginUniqueNickSoapIn.typecode)
        return request,LoginUniqueNickSoapOut()

    soapAction['http://gamespy.net/AuthService/LoginUniqueNick'] = 'soap_LoginUniqueNick'
    root[(LoginUniqueNickSoapIn.typecode.nspname,LoginUniqueNickSoapIn.typecode.pname)] = 'soap_LoginUniqueNick'

    def soap_LoginProfile(self, ps, **kw):
        request = ps.Parse(LoginProfileSoapIn.typecode)
        return request,LoginProfileSoapOut()

    soapAction['http://gamespy.net/AuthService/LoginProfile'] = 'soap_LoginProfile'
    root[(LoginProfileSoapIn.typecode.nspname,LoginProfileSoapIn.typecode.pname)] = 'soap_LoginProfile'

    def soap_LoginRemoteAuth(self, ps, **kw):
        request = ps.Parse(LoginRemoteAuthSoapIn.typecode)
        return request,LoginRemoteAuthSoapOut()

    soapAction['http://gamespy.net/AuthService/LoginRemoteAuth'] = 'soap_LoginRemoteAuth'
    root[(LoginRemoteAuthSoapIn.typecode.nspname,LoginRemoteAuthSoapIn.typecode.pname)] = 'soap_LoginRemoteAuth'

    def soap_VerifyLoginUniqueNick(self, ps, **kw):
        request = ps.Parse(VerifyLoginUniqueNickSoapIn.typecode)
        return request,VerifyLoginUniqueNickSoapOut()

    soapAction['http://gamespy.net/AuthService/VerifyLoginUniqueNick'] = 'soap_VerifyLoginUniqueNick'
    root[(VerifyLoginUniqueNickSoapIn.typecode.nspname,VerifyLoginUniqueNickSoapIn.typecode.pname)] = 'soap_VerifyLoginUniqueNick'

    def soap_VerifyLoginProfile(self, ps, **kw):
        request = ps.Parse(VerifyLoginProfileSoapIn.typecode)
        return request,VerifyLoginProfileSoapOut()

    soapAction['http://gamespy.net/AuthService/VerifyLoginProfile'] = 'soap_VerifyLoginProfile'
    root[(VerifyLoginProfileSoapIn.typecode.nspname,VerifyLoginProfileSoapIn.typecode.pname)] = 'soap_VerifyLoginProfile'

    def soap_LoginTicket(self, ps, **kw):
        request = ps.Parse(LoginTicketSoapIn.typecode)
        return request,LoginTicketSoapOut()

    soapAction['http://gamespy.net/AuthService/LoginTicket'] = 'soap_LoginTicket'
    root[(LoginTicketSoapIn.typecode.nspname,LoginTicketSoapIn.typecode.pname)] = 'soap_LoginTicket'

    def soap_AuthRefreshCertificate(self, ps, **kw):
        request = ps.Parse(AuthRefreshCertificateSoapIn.typecode)
        return request,AuthRefreshCertificateSoapOut()

    soapAction['http://gamespy.net/AuthService/AuthRefreshCertificate'] = 'soap_AuthRefreshCertificate'
    root[(AuthRefreshCertificateSoapIn.typecode.nspname,AuthRefreshCertificateSoapIn.typecode.pname)] = 'soap_AuthRefreshCertificate'

    def soap_AuthIsCertificateValid(self, ps, **kw):
        request = ps.Parse(AuthIsCertificateValidSoapIn.typecode)
        return request,AuthIsCertificateValidSoapOut()

    soapAction['http://gamespy.net/AuthService/AuthIsCertificateValid'] = 'soap_AuthIsCertificateValid'
    root[(AuthIsCertificateValidSoapIn.typecode.nspname,AuthIsCertificateValidSoapIn.typecode.pname)] = 'soap_AuthIsCertificateValid'

    def soap_LoginPs3Cert(self, ps, **kw):
        request = ps.Parse(LoginPs3CertSoapIn.typecode)
        return request,LoginPs3CertSoapOut()

    soapAction['http://gamespy.net/AuthService/LoginPs3Cert'] = 'soap_LoginPs3Cert'
    root[(LoginPs3CertSoapIn.typecode.nspname,LoginPs3CertSoapIn.typecode.pname)] = 'soap_LoginPs3Cert'

