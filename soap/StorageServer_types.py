##################################################
# file: StorageServer_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -wb StorageServer.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://gamespy.net/sake
##############################

class ns0:
    targetNamespace = "http://gamespy.net/sake"

    class ArrayOfRecordField_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "ArrayOfRecordField")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfRecordField_Def.schema
            TClist = [GTD("http://gamespy.net/sake","RecordField",lazy=False)(pname=(ns,"RecordField"), aname="_RecordField", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecordField = []
                    return
            Holder.__name__ = "ArrayOfRecordField_Holder"
            self.pyclass = Holder

    class RecordField_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "RecordField")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RecordField_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","RecordValue",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "RecordField_Holder"
            self.pyclass = Holder

    class RecordValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "RecordValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RecordValue_Def.schema
            TClist = [GTD("http://gamespy.net/sake","ByteValue",lazy=False)(pname=(ns,"byteValue"), aname="_byteValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","ShortValue",lazy=False)(pname=(ns,"shortValue"), aname="_shortValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","IntValue",lazy=False)(pname=(ns,"intValue"), aname="_intValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","FloatValue",lazy=False)(pname=(ns,"floatValue"), aname="_floatValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","AsciiStringValue",lazy=False)(pname=(ns,"asciiStringValue"), aname="_asciiStringValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","UnicodeStringValue",lazy=False)(pname=(ns,"unicodeStringValue"), aname="_unicodeStringValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","BooleanValue",lazy=False)(pname=(ns,"booleanValue"), aname="_booleanValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","DateAndTimeValue",lazy=False)(pname=(ns,"dateAndTimeValue"), aname="_dateAndTimeValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","BinaryDataValue",lazy=False)(pname=(ns,"binaryDataValue"), aname="_binaryDataValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","Int64Value",lazy=False)(pname=(ns,"int64Value"), aname="_int64Value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._byteValue = None
                    self._shortValue = None
                    self._intValue = None
                    self._floatValue = None
                    self._asciiStringValue = None
                    self._unicodeStringValue = None
                    self._booleanValue = None
                    self._dateAndTimeValue = None
                    self._binaryDataValue = None
                    self._int64Value = None
                    return
            Holder.__name__ = "RecordValue_Holder"
            self.pyclass = Holder

    class ByteValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "ByteValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ByteValue_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedByte(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    return
            Holder.__name__ = "ByteValue_Holder"
            self.pyclass = Holder

    class ShortValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "ShortValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ShortValue_Def.schema
            TClist = [ZSI.TCnumbers.Ishort(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    return
            Holder.__name__ = "ShortValue_Holder"
            self.pyclass = Holder

    class IntValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "IntValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IntValue_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    return
            Holder.__name__ = "IntValue_Holder"
            self.pyclass = Holder

    class FloatValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "FloatValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FloatValue_Def.schema
            TClist = [ZSI.TCnumbers.FPfloat(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    return
            Holder.__name__ = "FloatValue_Holder"
            self.pyclass = Holder

    class AsciiStringValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "AsciiStringValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AsciiStringValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    return
            Holder.__name__ = "AsciiStringValue_Holder"
            self.pyclass = Holder

    class UnicodeStringValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "UnicodeStringValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.UnicodeStringValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    return
            Holder.__name__ = "UnicodeStringValue_Holder"
            self.pyclass = Holder

    class BooleanValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "BooleanValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BooleanValue_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    return
            Holder.__name__ = "BooleanValue_Holder"
            self.pyclass = Holder

    class DateAndTimeValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "DateAndTimeValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DateAndTimeValue_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    return
            Holder.__name__ = "DateAndTimeValue_Holder"
            self.pyclass = Holder

    class BinaryDataValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "BinaryDataValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BinaryDataValue_Def.schema
            TClist = [ZSI.TC.Base64String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    return
            Holder.__name__ = "BinaryDataValue_Holder"
            self.pyclass = Holder

    class Int64Value_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "Int64Value")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Int64Value_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    return
            Holder.__name__ = "Int64Value_Holder"
            self.pyclass = Holder

    class Result_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "Result")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfString_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "ArrayOfString")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfString_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"string"), aname="_string", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._string = []
                    return
            Holder.__name__ = "ArrayOfString_Holder"
            self.pyclass = Holder

    class ArrayOfInt_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "ArrayOfInt")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfInt_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"int"), aname="_int", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._int = []
                    return
            Holder.__name__ = "ArrayOfInt_Holder"
            self.pyclass = Holder

    class ArrayOfArrayOfRecordValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "ArrayOfArrayOfRecordValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfArrayOfRecordValue_Def.schema
            TClist = [GTD("http://gamespy.net/sake","ArrayOfRecordValue",lazy=False)(pname=(ns,"ArrayOfRecordValue"), aname="_ArrayOfRecordValue", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ArrayOfRecordValue = []
                    return
            Holder.__name__ = "ArrayOfArrayOfRecordValue_Holder"
            self.pyclass = Holder

    class ArrayOfRecordValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/sake"
        type = (schema, "ArrayOfRecordValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfRecordValue_Def.schema
            TClist = [GTD("http://gamespy.net/sake","RecordValue",lazy=False)(pname=(ns,"RecordValue"), aname="_RecordValue", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RecordValue = []
                    return
            Holder.__name__ = "ArrayOfRecordValue_Holder"
            self.pyclass = Holder

    class CreateRecord_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CreateRecord"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.CreateRecord_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"gameid"), aname="_gameid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginTicket"), aname="_loginTicket", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"tableid"), aname="_tableid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","ArrayOfRecordField",lazy=False)(pname=(ns,"values"), aname="_values", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'CreateRecord')
            kw["aname"] = "_CreateRecord"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gameid = None
                    self._loginTicket = None
                    self._tableid = None
                    self._values = None
                    return
            Holder.__name__ = "CreateRecord_Holder"
            self.pyclass = Holder

    class CreateRecordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CreateRecordResponse"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.CreateRecordResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/sake","Result",lazy=False)(pname=(ns,"CreateRecordResult"), aname="_CreateRecordResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"recordid"), aname="_recordid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'CreateRecordResponse')
            kw["aname"] = "_CreateRecordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CreateRecordResult = None
                    self._recordid = None
                    return
            Holder.__name__ = "CreateRecordResponse_Holder"
            self.pyclass = Holder

    class UpdateRecord_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "UpdateRecord"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.UpdateRecord_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"gameid"), aname="_gameid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginTicket"), aname="_loginTicket", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"tableid"), aname="_tableid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"recordid"), aname="_recordid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","ArrayOfRecordField",lazy=False)(pname=(ns,"values"), aname="_values", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'UpdateRecord')
            kw["aname"] = "_UpdateRecord"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gameid = None
                    self._loginTicket = None
                    self._tableid = None
                    self._recordid = None
                    self._values = None
                    return
            Holder.__name__ = "UpdateRecord_Holder"
            self.pyclass = Holder

    class UpdateRecordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "UpdateRecordResponse"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.UpdateRecordResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/sake","Result",lazy=False)(pname=(ns,"UpdateRecordResult"), aname="_UpdateRecordResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'UpdateRecordResponse')
            kw["aname"] = "_UpdateRecordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._UpdateRecordResult = None
                    return
            Holder.__name__ = "UpdateRecordResponse_Holder"
            self.pyclass = Holder

    class DeleteRecord_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DeleteRecord"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.DeleteRecord_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"gameid"), aname="_gameid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginTicket"), aname="_loginTicket", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"tableid"), aname="_tableid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"recordid"), aname="_recordid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'DeleteRecord')
            kw["aname"] = "_DeleteRecord"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gameid = None
                    self._loginTicket = None
                    self._tableid = None
                    self._recordid = None
                    return
            Holder.__name__ = "DeleteRecord_Holder"
            self.pyclass = Holder

    class DeleteRecordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DeleteRecordResponse"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.DeleteRecordResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/sake","Result",lazy=False)(pname=(ns,"DeleteRecordResult"), aname="_DeleteRecordResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'DeleteRecordResponse')
            kw["aname"] = "_DeleteRecordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._DeleteRecordResult = None
                    return
            Holder.__name__ = "DeleteRecordResponse_Holder"
            self.pyclass = Holder

    class SearchForRecords_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SearchForRecords"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.SearchForRecords_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"gameid"), aname="_gameid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginTicket"), aname="_loginTicket", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"tableid"), aname="_tableid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","ArrayOfString",lazy=False)(pname=(ns,"fields"), aname="_fields", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"filter"), aname="_filter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sort"), aname="_sort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"offset"), aname="_offset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"max"), aname="_max", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"targetfilter"), aname="_targetfilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"surrounding"), aname="_surrounding", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","ArrayOfInt",lazy=False)(pname=(ns,"ownerids"), aname="_ownerids", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"cacheFlag"), aname="_cacheFlag", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'SearchForRecords')
            kw["aname"] = "_SearchForRecords"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gameid = None
                    self._loginTicket = None
                    self._tableid = None
                    self._fields = None
                    self._filter = None
                    self._sort = None
                    self._offset = None
                    self._max = None
                    self._targetfilter = None
                    self._surrounding = None
                    self._ownerids = None
                    self._cacheFlag = None
                    return
            Holder.__name__ = "SearchForRecords_Holder"
            self.pyclass = Holder

    class SearchForRecordsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SearchForRecordsResponse"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.SearchForRecordsResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/sake","Result",lazy=False)(pname=(ns,"SearchForRecordsResult"), aname="_SearchForRecordsResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","ArrayOfArrayOfRecordValue",lazy=False)(pname=(ns,"values"), aname="_values", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'SearchForRecordsResponse')
            kw["aname"] = "_SearchForRecordsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SearchForRecordsResult = None
                    self._values = None
                    return
            Holder.__name__ = "SearchForRecordsResponse_Holder"
            self.pyclass = Holder

    class GetMyRecords_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetMyRecords"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.GetMyRecords_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"gameid"), aname="_gameid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginTicket"), aname="_loginTicket", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"tableid"), aname="_tableid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","ArrayOfString",lazy=False)(pname=(ns,"fields"), aname="_fields", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'GetMyRecords')
            kw["aname"] = "_GetMyRecords"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gameid = None
                    self._loginTicket = None
                    self._tableid = None
                    self._fields = None
                    return
            Holder.__name__ = "GetMyRecords_Holder"
            self.pyclass = Holder

    class GetMyRecordsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetMyRecordsResponse"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.GetMyRecordsResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/sake","Result",lazy=False)(pname=(ns,"GetMyRecordsResult"), aname="_GetMyRecordsResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","ArrayOfArrayOfRecordValue",lazy=False)(pname=(ns,"values"), aname="_values", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'GetMyRecordsResponse')
            kw["aname"] = "_GetMyRecordsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetMyRecordsResult = None
                    self._values = None
                    return
            Holder.__name__ = "GetMyRecordsResponse_Holder"
            self.pyclass = Holder

    class GetSpecificRecords_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetSpecificRecords"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.GetSpecificRecords_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"gameid"), aname="_gameid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginTicket"), aname="_loginTicket", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"tableid"), aname="_tableid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","ArrayOfInt",lazy=False)(pname=(ns,"recordids"), aname="_recordids", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","ArrayOfString",lazy=False)(pname=(ns,"fields"), aname="_fields", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'GetSpecificRecords')
            kw["aname"] = "_GetSpecificRecords"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gameid = None
                    self._loginTicket = None
                    self._tableid = None
                    self._recordids = None
                    self._fields = None
                    return
            Holder.__name__ = "GetSpecificRecords_Holder"
            self.pyclass = Holder

    class GetSpecificRecordsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetSpecificRecordsResponse"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.GetSpecificRecordsResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/sake","Result",lazy=False)(pname=(ns,"GetSpecificRecordsResult"), aname="_GetSpecificRecordsResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","ArrayOfArrayOfRecordValue",lazy=False)(pname=(ns,"values"), aname="_values", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'GetSpecificRecordsResponse')
            kw["aname"] = "_GetSpecificRecordsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetSpecificRecordsResult = None
                    self._values = None
                    return
            Holder.__name__ = "GetSpecificRecordsResponse_Holder"
            self.pyclass = Holder

    class GetRandomRecords_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetRandomRecords"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.GetRandomRecords_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"gameid"), aname="_gameid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginTicket"), aname="_loginTicket", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"tableid"), aname="_tableid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","ArrayOfString",lazy=False)(pname=(ns,"fields"), aname="_fields", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"filter"), aname="_filter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"max"), aname="_max", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'GetRandomRecords')
            kw["aname"] = "_GetRandomRecords"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gameid = None
                    self._loginTicket = None
                    self._tableid = None
                    self._fields = None
                    self._filter = None
                    self._max = None
                    return
            Holder.__name__ = "GetRandomRecords_Holder"
            self.pyclass = Holder

    class GetRandomRecordsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetRandomRecordsResponse"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.GetRandomRecordsResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/sake","Result",lazy=False)(pname=(ns,"GetRandomRecordsResult"), aname="_GetRandomRecordsResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","ArrayOfArrayOfRecordValue",lazy=False)(pname=(ns,"values"), aname="_values", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'GetRandomRecordsResponse')
            kw["aname"] = "_GetRandomRecordsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetRandomRecordsResult = None
                    self._values = None
                    return
            Holder.__name__ = "GetRandomRecordsResponse_Holder"
            self.pyclass = Holder

    class GetRecordCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetRecordCount"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.GetRecordCount_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"gameid"), aname="_gameid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginTicket"), aname="_loginTicket", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"tableid"), aname="_tableid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"filter"), aname="_filter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"cacheFlag"), aname="_cacheFlag", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'GetRecordCount')
            kw["aname"] = "_GetRecordCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gameid = None
                    self._loginTicket = None
                    self._tableid = None
                    self._filter = None
                    self._cacheFlag = None
                    return
            Holder.__name__ = "GetRecordCount_Holder"
            self.pyclass = Holder

    class GetRecordCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetRecordCountResponse"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.GetRecordCountResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/sake","Result",lazy=False)(pname=(ns,"GetRecordCountResult"), aname="_GetRecordCountResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"count"), aname="_count", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'GetRecordCountResponse')
            kw["aname"] = "_GetRecordCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetRecordCountResult = None
                    self._count = None
                    return
            Holder.__name__ = "GetRecordCountResponse_Holder"
            self.pyclass = Holder

    class RateRecord_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RateRecord"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.RateRecord_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"gameid"), aname="_gameid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginTicket"), aname="_loginTicket", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"tableid"), aname="_tableid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"recordid"), aname="_recordid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedByte(pname=(ns,"rating"), aname="_rating", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'RateRecord')
            kw["aname"] = "_RateRecord"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gameid = None
                    self._loginTicket = None
                    self._tableid = None
                    self._recordid = None
                    self._rating = None
                    return
            Holder.__name__ = "RateRecord_Holder"
            self.pyclass = Holder

    class RateRecordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RateRecordResponse"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.RateRecordResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/sake","Result",lazy=False)(pname=(ns,"RateRecordResult"), aname="_RateRecordResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"numRatings"), aname="_numRatings", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname=(ns,"averageRating"), aname="_averageRating", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'RateRecordResponse')
            kw["aname"] = "_RateRecordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._RateRecordResult = None
                    self._numRatings = None
                    self._averageRating = None
                    return
            Holder.__name__ = "RateRecordResponse_Holder"
            self.pyclass = Holder

    class GetRecordLimit_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetRecordLimit"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.GetRecordLimit_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"gameid"), aname="_gameid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginTicket"), aname="_loginTicket", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"tableid"), aname="_tableid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'GetRecordLimit')
            kw["aname"] = "_GetRecordLimit"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gameid = None
                    self._loginTicket = None
                    self._tableid = None
                    return
            Holder.__name__ = "GetRecordLimit_Holder"
            self.pyclass = Holder

    class GetRecordLimitResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetRecordLimitResponse"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.GetRecordLimitResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/sake","Result",lazy=False)(pname=(ns,"GetRecordLimitResult"), aname="_GetRecordLimitResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"limitPerOwner"), aname="_limitPerOwner", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"numOwned"), aname="_numOwned", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'GetRecordLimitResponse')
            kw["aname"] = "_GetRecordLimitResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetRecordLimitResult = None
                    self._limitPerOwner = None
                    self._numOwned = None
                    return
            Holder.__name__ = "GetRecordLimitResponse_Holder"
            self.pyclass = Holder

    class GetMyImages_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetMyImages"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.GetMyImages_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"gameid"), aname="_gameid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"profileid"), aname="_profileid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginTicket"), aname="_loginTicket", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'GetMyImages')
            kw["aname"] = "_GetMyImages"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gameid = None
                    self._profileid = None
                    self._loginTicket = None
                    return
            Holder.__name__ = "GetMyImages_Holder"
            self.pyclass = Holder

    class GetMyImagesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetMyImagesResponse"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.GetMyImagesResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/sake","Result",lazy=False)(pname=(ns,"GetMyImagesResult"), aname="_GetMyImagesResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/sake","ArrayOfArrayOfRecordValue",lazy=False)(pname=(ns,"values"), aname="_values", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'GetMyImagesResponse')
            kw["aname"] = "_GetMyImagesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetMyImagesResult = None
                    self._values = None
                    return
            Holder.__name__ = "GetMyImagesResponse_Holder"
            self.pyclass = Holder

    class DeleteImage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DeleteImage"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.DeleteImage_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"gameid"), aname="_gameid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"fileid"), aname="_fileid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginTicket"), aname="_loginTicket", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'DeleteImage')
            kw["aname"] = "_DeleteImage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gameid = None
                    self._fileid = None
                    self._loginTicket = None
                    return
            Holder.__name__ = "DeleteImage_Holder"
            self.pyclass = Holder

    class DeleteImageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DeleteImageResponse"
        schema = "http://gamespy.net/sake"
        def __init__(self, **kw):
            ns = ns0.DeleteImageResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/sake","Result",lazy=False)(pname=(ns,"DeleteImageResult"), aname="_DeleteImageResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/sake', u'DeleteImageResponse')
            kw["aname"] = "_DeleteImageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._DeleteImageResult = None
                    return
            Holder.__name__ = "DeleteImageResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://gamespy.net/sake)
