##################################################
# file: AuthService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -bw http://redalert3pc.auth.pubsvs.gamespy.com/AuthService/AuthService.asmx?wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://gamespy.net/AuthService/
##############################

class ns0:
    targetNamespace = "http://gamespy.net/AuthService/"

    class LoginResponseMsg_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/AuthService/"
        type = (schema, "LoginResponseMsg")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LoginResponseMsg_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"responseCode"), aname="_responseCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gamespy.net/AuthService/","LoginCertificate",lazy=False)(pname=(ns,"certificate"), aname="_certificate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.HexBinaryString(pname=(ns,"peerkeyprivate"), aname="_peerkeyprivate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responseCode = None
                    self._certificate = None
                    self._peerkeyprivate = None
                    return
            Holder.__name__ = "LoginResponseMsg_Holder"
            self.pyclass = Holder

    class LoginCertificate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/AuthService/"
        type = (schema, "LoginCertificate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LoginCertificate_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"length"), aname="_length", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"version"), aname="_version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"partnercode"), aname="_partnercode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"namespaceid"), aname="_namespaceid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"userid"), aname="_userid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"profileid"), aname="_profileid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"expiretime"), aname="_expiretime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"profilenick"), aname="_profilenick", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"uniquenick"), aname="_uniquenick", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cdkeyhash"), aname="_cdkeyhash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.HexBinaryString(pname=(ns,"peerkeymodulus"), aname="_peerkeymodulus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.HexBinaryString(pname=(ns,"peerkeyexponent"), aname="_peerkeyexponent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.HexBinaryString(pname=(ns,"serverdata"), aname="_serverdata", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.HexBinaryString(pname=(ns,"signature"), aname="_signature", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"timestamp"), aname="_timestamp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._length = None
                    self._version = None
                    self._partnercode = None
                    self._namespaceid = None
                    self._userid = None
                    self._profileid = None
                    self._expiretime = None
                    self._profilenick = None
                    self._uniquenick = None
                    self._cdkeyhash = None
                    self._peerkeymodulus = None
                    self._peerkeyexponent = None
                    self._serverdata = None
                    self._signature = None
                    self._timestamp = None
                    return
            Holder.__name__ = "LoginCertificate_Holder"
            self.pyclass = Holder

    class VerifyLoginResponseMsg_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/AuthService/"
        type = (schema, "VerifyLoginResponseMsg")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.VerifyLoginResponseMsg_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"responseCode"), aname="_responseCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responseCode = None
                    return
            Holder.__name__ = "VerifyLoginResponseMsg_Holder"
            self.pyclass = Holder

    class LoginPs3CertResponseMsg_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gamespy.net/AuthService/"
        type = (schema, "LoginPs3CertResponseMsg")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LoginPs3CertResponseMsg_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"responseCode"), aname="_responseCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"partnerChallenge"), aname="_partnerChallenge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._responseCode = None
                    self._authToken = None
                    self._partnerChallenge = None
                    return
            Holder.__name__ = "LoginPs3CertResponseMsg_Holder"
            self.pyclass = Holder

    class LoginUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "LoginUser"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.LoginUser_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname=(ns,"version"), aname="_version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname=(ns,"partnercode"), aname="_partnercode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"email"), aname="_email", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'LoginUser')
            kw["aname"] = "_LoginUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._version = None
                    self._partnercode = None
                    self._email = None
                    self._password = None
                    return
            Holder.__name__ = "LoginUser_Holder"
            self.pyclass = Holder

    class LoginUserResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "LoginUserResponse"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.LoginUserResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/AuthService/","LoginResponseMsg",lazy=False)(pname=(ns,"LoginUserResult"), aname="_LoginUserResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'LoginUserResponse')
            kw["aname"] = "_LoginUserResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LoginUserResult = None
                    return
            Holder.__name__ = "LoginUserResponse_Holder"
            self.pyclass = Holder

    class LoginUniqueNick_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "LoginUniqueNick"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.LoginUniqueNick_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname=(ns,"version"), aname="_version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname=(ns,"partnercode"), aname="_partnercode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname=(ns,"namespaceid"), aname="_namespaceid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"uniquenick"), aname="_uniquenick", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'LoginUniqueNick')
            kw["aname"] = "_LoginUniqueNick"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._version = None
                    self._partnercode = None
                    self._namespaceid = None
                    self._uniquenick = None
                    self._password = None
                    return
            Holder.__name__ = "LoginUniqueNick_Holder"
            self.pyclass = Holder

    class LoginUniqueNickResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "LoginUniqueNickResponse"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.LoginUniqueNickResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/AuthService/","LoginResponseMsg",lazy=False)(pname=(ns,"LoginUniqueNickResult"), aname="_LoginUniqueNickResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'LoginUniqueNickResponse')
            kw["aname"] = "_LoginUniqueNickResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LoginUniqueNickResult = None
                    return
            Holder.__name__ = "LoginUniqueNickResponse_Holder"
            self.pyclass = Holder

    class LoginProfile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "LoginProfile"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.LoginProfile_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname=(ns,"version"), aname="_version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname=(ns,"partnercode"), aname="_partnercode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname=(ns,"namespaceid"), aname="_namespaceid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"email"), aname="_email", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"profilenick"), aname="_profilenick", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'LoginProfile')
            kw["aname"] = "_LoginProfile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._version = None
                    self._partnercode = None
                    self._namespaceid = None
                    self._email = None
                    self._profilenick = None
                    self._password = None
                    return
            Holder.__name__ = "LoginProfile_Holder"
            self.pyclass = Holder

    class LoginProfileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "LoginProfileResponse"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.LoginProfileResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/AuthService/","LoginResponseMsg",lazy=False)(pname=(ns,"LoginProfileResult"), aname="_LoginProfileResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'LoginProfileResponse')
            kw["aname"] = "_LoginProfileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LoginProfileResult = None
                    return
            Holder.__name__ = "LoginProfileResponse_Holder"
            self.pyclass = Holder

    class LoginRemoteAuth_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "LoginRemoteAuth"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.LoginRemoteAuth_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname=(ns,"version"), aname="_version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"partnercode"), aname="_partnercode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"namespaceid"), aname="_namespaceid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authtoken"), aname="_authtoken", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"challenge"), aname="_challenge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'LoginRemoteAuth')
            kw["aname"] = "_LoginRemoteAuth"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._version = None
                    self._partnercode = None
                    self._namespaceid = None
                    self._authtoken = None
                    self._challenge = None
                    return
            Holder.__name__ = "LoginRemoteAuth_Holder"
            self.pyclass = Holder

    class LoginRemoteAuthResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "LoginRemoteAuthResponse"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.LoginRemoteAuthResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/AuthService/","LoginResponseMsg",lazy=False)(pname=(ns,"LoginRemoteAuthResult"), aname="_LoginRemoteAuthResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'LoginRemoteAuthResponse')
            kw["aname"] = "_LoginRemoteAuthResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LoginRemoteAuthResult = None
                    return
            Holder.__name__ = "LoginRemoteAuthResponse_Holder"
            self.pyclass = Holder

    class VerifyLoginUniqueNick_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "VerifyLoginUniqueNick"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.VerifyLoginUniqueNick_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname=(ns,"version"), aname="_version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname=(ns,"namespaceid"), aname="_namespaceid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"uniquenick"), aname="_uniquenick", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'VerifyLoginUniqueNick')
            kw["aname"] = "_VerifyLoginUniqueNick"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._version = None
                    self._namespaceid = None
                    self._uniquenick = None
                    self._password = None
                    return
            Holder.__name__ = "VerifyLoginUniqueNick_Holder"
            self.pyclass = Holder

    class VerifyLoginUniqueNickResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "VerifyLoginUniqueNickResponse"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.VerifyLoginUniqueNickResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/AuthService/","VerifyLoginResponseMsg",lazy=False)(pname=(ns,"VerifyLoginUniqueNickResult"), aname="_VerifyLoginUniqueNickResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'VerifyLoginUniqueNickResponse')
            kw["aname"] = "_VerifyLoginUniqueNickResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._VerifyLoginUniqueNickResult = None
                    return
            Holder.__name__ = "VerifyLoginUniqueNickResponse_Holder"
            self.pyclass = Holder

    class VerifyLoginProfile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "VerifyLoginProfile"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.VerifyLoginProfile_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname=(ns,"version"), aname="_version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname=(ns,"namespaceid"), aname="_namespaceid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"email"), aname="_email", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"profilenick"), aname="_profilenick", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'VerifyLoginProfile')
            kw["aname"] = "_VerifyLoginProfile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._version = None
                    self._namespaceid = None
                    self._email = None
                    self._profilenick = None
                    self._password = None
                    return
            Holder.__name__ = "VerifyLoginProfile_Holder"
            self.pyclass = Holder

    class VerifyLoginProfileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "VerifyLoginProfileResponse"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.VerifyLoginProfileResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/AuthService/","VerifyLoginResponseMsg",lazy=False)(pname=(ns,"VerifyLoginProfileResult"), aname="_VerifyLoginProfileResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'VerifyLoginProfileResponse')
            kw["aname"] = "_VerifyLoginProfileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._VerifyLoginProfileResult = None
                    return
            Holder.__name__ = "VerifyLoginProfileResponse_Holder"
            self.pyclass = Holder

    class LoginTicket_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "LoginTicket"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.LoginTicket_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname=(ns,"partnerID"), aname="_partnerID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"loginTicket"), aname="_loginTicket", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'LoginTicket')
            kw["aname"] = "_LoginTicket"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._partnerID = None
                    self._loginTicket = None
                    return
            Holder.__name__ = "LoginTicket_Holder"
            self.pyclass = Holder

    class LoginTicketResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "LoginTicketResponse"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.LoginTicketResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/AuthService/","LoginResponseMsg",lazy=False)(pname=(ns,"LoginTicketResult"), aname="_LoginTicketResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'LoginTicketResponse')
            kw["aname"] = "_LoginTicketResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LoginTicketResult = None
                    return
            Holder.__name__ = "LoginTicketResponse_Holder"
            self.pyclass = Holder

    class AuthRefreshCertificate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AuthRefreshCertificate"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.AuthRefreshCertificate_Dec.schema
            TClist = [GTD("http://gamespy.net/AuthService/","LoginCertificate",lazy=False)(pname=(ns,"certificate"), aname="_certificate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'AuthRefreshCertificate')
            kw["aname"] = "_AuthRefreshCertificate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._certificate = None
                    return
            Holder.__name__ = "AuthRefreshCertificate_Holder"
            self.pyclass = Holder

    class AuthRefreshCertificateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AuthRefreshCertificateResponse"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.AuthRefreshCertificateResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/AuthService/","LoginResponseMsg",lazy=False)(pname=(ns,"AuthRefreshCertificateResult"), aname="_AuthRefreshCertificateResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'AuthRefreshCertificateResponse')
            kw["aname"] = "_AuthRefreshCertificateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AuthRefreshCertificateResult = None
                    return
            Holder.__name__ = "AuthRefreshCertificateResponse_Holder"
            self.pyclass = Holder

    class AuthIsCertificateValid_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AuthIsCertificateValid"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.AuthIsCertificateValid_Dec.schema
            TClist = [GTD("http://gamespy.net/AuthService/","LoginCertificate",lazy=False)(pname=(ns,"certificate"), aname="_certificate", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"proof"), aname="_proof", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'AuthIsCertificateValid')
            kw["aname"] = "_AuthIsCertificateValid"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._certificate = None
                    self._proof = None
                    return
            Holder.__name__ = "AuthIsCertificateValid_Holder"
            self.pyclass = Holder

    class AuthIsCertificateValidResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "AuthIsCertificateValidResponse"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.AuthIsCertificateValidResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"AuthIsCertificateValidResult"), aname="_AuthIsCertificateValidResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'AuthIsCertificateValidResponse')
            kw["aname"] = "_AuthIsCertificateValidResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AuthIsCertificateValidResult = None
                    return
            Holder.__name__ = "AuthIsCertificateValidResponse_Holder"
            self.pyclass = Holder

    class LoginPs3Cert_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "LoginPs3Cert"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.LoginPs3Cert_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"npticket"), aname="_npticket", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'LoginPs3Cert')
            kw["aname"] = "_LoginPs3Cert"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._npticket = None
                    return
            Holder.__name__ = "LoginPs3Cert_Holder"
            self.pyclass = Holder

    class LoginPs3CertResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "LoginPs3CertResponse"
        schema = "http://gamespy.net/AuthService/"
        def __init__(self, **kw):
            ns = ns0.LoginPs3CertResponse_Dec.schema
            TClist = [GTD("http://gamespy.net/AuthService/","LoginPs3CertResponseMsg",lazy=False)(pname=(ns,"LoginPs3CertResult"), aname="_LoginPs3CertResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'http://gamespy.net/AuthService/', u'LoginPs3CertResponse')
            kw["aname"] = "_LoginPs3CertResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LoginPs3CertResult = None
                    return
            Holder.__name__ = "LoginPs3CertResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://gamespy.net/AuthService/)
